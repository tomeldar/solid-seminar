openapi: 3.0.3
info:
  title: SOLID Seminar Final Integration (Fragment)
  version: 0.1.0
paths:
  /users:
    post:
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, displayName]
              properties:
                email: { type: string, format: email }
                displayName: { type: string }
                role: { type: string, enum: [ADMIN, AUTHOR, READER] }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '400': { description: Validation error }
  /users/{id}:
    get:
      summary: Get user
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '404': { description: Not found }
  /notes:
    post:
      summary: Create note
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [authorId, title, content]
              properties:
                authorId: { type: string, format: uuid }
                title: { type: string }
                content: { type: string }
      responses:
        '201': { description: Created }
        '400': { description: Validation error }
        '404': { description: User not found }
    get:
      summary: List notes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Note' }
  /notes/{id}:
    get:
      summary: Get note
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
        '403': { description: Forbidden }
    patch:
      summary: Update note
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                content: { type: string }
      responses:
        '200': { description: Updated }
        '404': { description: Not found }
        '403': { description: Forbidden }
    delete:
      summary: Delete note
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: Deleted }
        '404': { description: Not found }
        '403': { description: Forbidden }
components:
  schemas:
    User:
      type: object
      required: [id, email, displayName, role]
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        displayName: { type: string }
        role: { type: string, enum: [ADMIN, AUTHOR, READER] }
    Note:
      type: object
      required: [id, authorId, title, content, createdAt, updatedAt]
      properties:
        id: { type: string, format: uuid }
        authorId: { type: string, format: uuid }
        title: { type: string }
        content: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
